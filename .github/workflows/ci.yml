name: "CI"

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git filters for CI
        run: |
          echo "=== CI Environment Setup ==="
          echo "macOS version:" 
          sw_vers
          echo
          echo "Available commands:"
          command -v scutil && echo "scutil: $(which scutil)" || echo "scutil: MISSING"
          command -v hostname && echo "hostname: $(which hostname)" || echo "hostname: MISSING" 
          command -v whoami && echo "whoami: $(which whoami)" || echo "whoami: MISSING"
          command -v perl && echo "perl: $(which perl)" || echo "perl: MISSING"
          echo
          echo "Current user: $(whoami)"
          echo "Hostname: $(hostname)"
          if command -v scutil >/dev/null 2>&1; then
            echo "ComputerName: $(scutil --get ComputerName 2>/dev/null || echo 'N/A')"
            echo "LocalHostName: $(scutil --get LocalHostName 2>/dev/null || echo 'N/A')"
          fi
          echo
          
          echo "=== Setting up Git filters ==="
          # Make filter scripts executable
          chmod +x .git-filters/*.sh
          
          # Show original env.nix content
          echo "Original env.nix username line:"
          grep "username" nix/env.nix | head -1
          
          # Configure git filters
          git config filter.system-info.clean './.git-filters/clean.sh'
          git config filter.system-info.smudge './.git-filters/smudge.sh' 
          git config filter.system-info.required true
          
          # Test the smudge script directly
          echo "Testing smudge script directly:"
          echo 'username = "{{USER_NAME}}";' | ./.git-filters/smudge.sh
          
          # Apply smudge filter directly to files that need it
          echo "Applying git filters to files with placeholders..."
          
          # Find all files with .gitattributes filter applied and containing placeholders
          for file in $(git ls-files | grep -E '\.(nix|sh|yml|yaml|json|toml|txt)$'); do
            if [[ -f "$file" ]] && grep -q "{{.*}}" "$file" 2>/dev/null; then
              echo "Processing: $file"
              ./.git-filters/smudge.sh < "$file" > "$file.tmp" && mv "$file.tmp" "$file"
            fi
          done
          
          echo "Direct filter application completed"
          
          # Verify env.nix was processed correctly
          echo "env.nix username after filter:"
          grep "username" nix/env.nix | head -1
          
          echo "Git filters setup completed"

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixpkgs-25.05-darwin

      - name: Run Statix Check
        run: nix run github:nerdypepper/statix -- check .

      - name: Run Nix Flake Check
        run: nix flake check

      - name: Check if git filters worked
        id: check_filters
        run: |
          if grep -q "{{USER_NAME}}" nix/env.nix; then
            echo "Git filters failed - placeholders still present"
            echo "filters_success=false" >> $GITHUB_OUTPUT
          else
            echo "Git filters successful - placeholders replaced"  
            echo "filters_success=true" >> $GITHUB_OUTPUT
          fi

      - name: Build darwin configuration (common)
        if: steps.check_filters.outputs.filters_success == 'true'
        run: nix build .#darwinConfigurations.common.system

      - name: Build darwin configuration (commercial)
        if: steps.check_filters.outputs.filters_success == 'true'  
        run: nix build .#darwinConfigurations.commercial.system

      - name: Build minimum configuration (common-minimum)
        if: steps.check_filters.outputs.filters_success == 'true'
        run: nix build .#darwinConfigurations.common-minimum.system

      - name: Build full configuration (common-full)
        if: steps.check_filters.outputs.filters_success == 'true'
        run: nix build .#darwinConfigurations.common-full.system
        
      - name: Skip builds (git filters not working)
        if: steps.check_filters.outputs.filters_success == 'false'
        run: |
          echo "‚ö†Ô∏è  Skipping build steps because git filters are not working in CI environment"
          echo "üí° This is expected if CI environment doesn't support git filters properly"
          echo "‚úÖ Static analysis (statix, flake check) passed successfully"